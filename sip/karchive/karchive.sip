// Copyright 2014 Simon Edwards <simon@simonzone.com>

//                 Generated by twine2

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Library General Public License as
// published by the Free Software Foundation; either version 2, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details

// You should have received a copy of the GNU Library General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

class KArchive
{
%TypeHeaderCode
#include <karchive.h>
%End

protected:
                            KArchive (const QString& fileName);
                            KArchive (QIODevice* dev);
public:
    virtual ~KArchive ();
    virtual bool            open (QIODevice::OpenMode mode);
    virtual bool            close ();
    bool                    isOpen () const;
    QIODevice::OpenMode     mode () const;
    QIODevice*              device () const;
    QString                 fileName () const;
    const KArchiveDirectory*  directory () const;
    bool                    addLocalFile (const QString& fileName, const QString& destName);
    bool                    addLocalDirectory (const QString& path, const QString& destName);
    bool                    writeDir (const QString& name, const QString& user = QString(), const QString& group = QString(), mode_t perm = 040755, const QDateTime& atime = QDateTime(), const QDateTime& mtime = QDateTime(), const QDateTime& ctime = QDateTime());
    bool                    writeSymLink (const QString& name, const QString& target, const QString& user = QString(), const QString& group = QString(), mode_t perm = 0120755, const QDateTime& atime = QDateTime(), const QDateTime& mtime = QDateTime(), const QDateTime& ctime = QDateTime());
    bool                    writeFile (const QString& name, const QByteArray& data, mode_t perm = 0100644, const QString& user = QString(), const QString& group = QString(), const QDateTime& atime = QDateTime(), const QDateTime& mtime = QDateTime(), const QDateTime& ctime = QDateTime());
    bool                    prepareWriting (const QString& name, const QString& user, const QString& group, qint64 size, mode_t perm = 0100644, const QDateTime& atime = QDateTime(), const QDateTime& mtime = QDateTime(), const QDateTime& ctime = QDateTime());
    virtual bool            writeData (const char* data, qint64 size);
    bool                    finishWriting (qint64 size);
protected:
    virtual bool            openArchive (QIODevice::OpenMode mode)=0;
    virtual bool            closeArchive ()=0;
    virtual KArchiveDirectory*  rootDir ();
    virtual bool            doWriteDir (const QString& name, const QString& user, const QString& group, mode_t perm, const QDateTime& atime, const QDateTime& mtime, const QDateTime& ctime)=0;
    virtual bool            doWriteSymLink (const QString& name, const QString& target, const QString& user, const QString& group, mode_t perm, const QDateTime& atime, const QDateTime& mtime, const QDateTime& ctime)=0;
    virtual bool            doPrepareWriting (const QString& name, const QString& user, const QString& group, qint64 size, mode_t perm, const QDateTime& atime, const QDateTime& mtime, const QDateTime& ctime)=0;
    virtual bool            doFinishWriting (qint64 size)=0;
    KArchiveDirectory*      findOrCreate (const QString& path);
    virtual bool            createDevice (QIODevice::OpenMode mode);
    void                    setDevice (QIODevice* dev);
    void                    setRootDir (KArchiveDirectory* rootDir);
    virtual void            virtual_hook (int id, void* data);
};
class KArchiveEntry
{
%TypeHeaderCode
#include <karchive.h>
%End

public:
                            KArchiveEntry (KArchive* archive, const QString& name, int access, const QDateTime& date, const QString& user, const QString& group, const QString& symlink);
    virtual ~KArchiveEntry ();
    QDateTime               date () const;
    QString                 name () const;
    mode_t                  permissions () const;
    QString                 user () const;
    QString                 group () const;
    QString                 symLinkTarget () const;
    virtual bool            isFile () const;
    virtual bool            isDirectory () const;
protected:
    KArchive*               archive () const;
    virtual void            virtual_hook (int id, void* data);
};
class KArchiveFile : KArchiveEntry
{
%TypeHeaderCode
#include <karchive.h>
%End

public:
                            KArchiveFile (KArchive* archive, const QString& name, int access, const QDateTime& date, const QString& user, const QString& group, const QString& symlink, qint64 pos, qint64 size);
    virtual ~KArchiveFile ();
    qint64                  position () const;
    qint64                  size () const;
    void                    setSize (qint64 s);
    virtual QByteArray      data () const;
    virtual QIODevice*      createDevice () const;
    virtual bool            isFile () const;
    bool                    copyTo (const QString& dest) const;
protected:
    virtual void            virtual_hook (int id, void* data);
};
class KArchiveDirectory : KArchiveEntry
{
%TypeHeaderCode
#include <karchive.h>
%End

public:
                            KArchiveDirectory (KArchive* archive, const QString& name, int access, const QDateTime& date, const QString& user, const QString& group, const QString& symlink);
    virtual ~KArchiveDirectory ();
    QStringList             entries () const;
    const KArchiveEntry*    entry (const QString& name) const;
    void                    addEntry (KArchiveEntry*);
    void                    removeEntry (KArchiveEntry*);
    virtual bool            isDirectory () const;
    bool                    copyTo (const QString& dest, bool recursive = 1) const;
protected:
    virtual void            virtual_hook (int id, void* data);
};
