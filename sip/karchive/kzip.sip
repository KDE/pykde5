// Copyright 2014 Simon Edwards <simon@simonzone.com>

//                 Generated by twine2

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Library General Public License as
// published by the Free Software Foundation; either version 2, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details

// You should have received a copy of the GNU Library General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

class KZip : KArchive
{
%TypeHeaderCode
#include <kzip.h>
%End

public:
                            KZip (const QString& filename);
                            KZip (QIODevice* dev);
    virtual ~KZip ();
    enum ExtraField
    {
        NoExtraField,
        ModificationTime,
        DefaultExtraField
    };
    void                    setExtraField (KZip::ExtraField ef);
    KZip::ExtraField        extraField () const;
    enum Compression
    {
        NoCompression,
        DeflateCompression
    };
    void                    setCompression (KZip::Compression c);
    KZip::Compression       compression () const;
    bool                    writeData (const char* data, qint64 size);
protected:
    bool                    doWriteSymLink (const QString& name, const QString& target, const QString& user, const QString& group, mode_t perm, const QDateTime& atime, const QDateTime& mtime, const QDateTime& ctime);
    bool                    doPrepareWriting (const QString& name, const QString& user, const QString& group, qint64 size, mode_t perm, const QDateTime& atime, const QDateTime& mtime, const QDateTime& creationTime);
    bool                    doFinishWriting (qint64 size);
    bool                    openArchive (QIODevice::OpenMode mode);
    bool                    closeArchive ();
    bool                    doWriteDir (const QString& name, const QString& user, const QString& group, mode_t perm, const QDateTime& atime, const QDateTime& mtime, const QDateTime& ctime);
    void                    virtual_hook (int id, void* data);
%ConvertToSubClassCode
    // CTSCC for subclasses of 'KZip'
    sipType = NULL;

    if (dynamic_cast<KZip*>(sipCpp))
        sipType = sipType_KZip;
%End
};
class KZipFileEntry : KArchiveFile
{
%TypeHeaderCode
#include <kzip.h>
%End

public:
                            KZipFileEntry (KZip* zip, const QString& name, int access, const QDateTime& date, const QString& user, const QString& group, const QString& symlink, const QString& path, qint64 start, qint64 uncompressedSize, int encoding, qint64 compressedSize);
    ~KZipFileEntry ();
    int                     encoding () const;
    qint64                  compressedSize () const;
    void                    setCompressedSize (qint64 compressedSize);
    void                    setHeaderStart (qint64 headerstart);
    qint64                  headerStart () const;
    unsigned long           crc32 () const;
    void                    setCRC32 (unsigned long crc32);
    const QString&          path () const;
    QByteArray              data () const;
    QIODevice*              createDevice () const;
%ConvertToSubClassCode
    // CTSCC for subclasses of 'KArchiveEntry'
    sipType = NULL;

    if (dynamic_cast<KArchiveDirectory*>(sipCpp))
        sipType = sipType_KArchiveDirectory;
    else if (dynamic_cast<KArchiveFile*>(sipCpp))
        {
        sipType = sipType_KArchiveFile;
        if (dynamic_cast<KZipFileEntry*>(sipCpp))
            sipType = sipType_KZipFileEntry;
        }
%End
};
%ModuleHeaderCode
//ctscc
#include <karchive.h>
#include <kzip.h>
%End
