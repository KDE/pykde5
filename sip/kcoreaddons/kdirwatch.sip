// Copyright 2014 Simon Edwards <simon@simonzone.com>

//                 Generated by twine2

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Library General Public License as
// published by the Free Software Foundation; either version 2, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details

// You should have received a copy of the GNU Library General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

class KDirWatch : QObject
{
%TypeHeaderCode
#include <kdirwatch.h>
%End

public:
    enum WatchMode
    {
        WatchDirOnly,
        WatchFiles,
        WatchSubDirs
    };
    typedef QFlags<KDirWatch::WatchMode> WatchModes;
                            KDirWatch (QObject* parent = 0);
    ~KDirWatch ();
    void                    addDir (const QString& path, KDirWatch::WatchModes watchModes = KDirWatch::WatchMode::WatchDirOnly);
    void                    addFile (const QString& file);
    QDateTime               ctime (const QString& path) const;
    void                    removeDir (const QString& path);
    void                    removeFile (const QString& file);
    bool                    stopDirScan (const QString& path);
    bool                    restartDirScan (const QString& path);
    void                    startScan (bool notify = 0, bool skippedToo = 0);
    void                    stopScan ();
    bool                    isStopped ();
    bool                    contains (const QString& path) const;
    void                    deleteQFSWatcher ();
    static void             statistics ();
    enum Method
    {
        FAM,
        INotify,
        Stat,
        QFSWatch
    };
    KDirWatch::Method       internalMethod () const;
    static KDirWatch*       self ();
    static bool             exists ();
    void                    setCreated (const QString& path);
    void                    setDirty (const QString& path);
    void                    setDeleted (const QString& path);
signals:
    void                    dirty (const QString& path);
    void                    created (const QString& path);
    void                    deleted (const QString& path);
};
