// Copyright 2014 Simon Edwards <simon@simonzone.com>

//                 Generated by twine2

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Library General Public License as
// published by the Free Software Foundation; either version 2, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details

// You should have received a copy of the GNU Library General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

class KFormat /Abstract/
{
%TypeHeaderCode
#include <kformat.h>
%End

public:
    enum BinarySizeUnits
    {
        DefaultBinaryUnits,
        UnitByte,
        UnitKiloByte,
        UnitMegaByte,
        UnitGigaByte,
        UnitTeraByte,
        UnitPetaByte,
        UnitExaByte,
        UnitZettaByte,
        UnitYottaByte,
        UnitLastUnit
    };
    enum BinaryUnitDialect
    {
        DefaultBinaryDialect,
        IECBinaryDialect,
        JEDECBinaryDialect,
        MetricBinaryDialect,
        LastBinaryDialect
    };
    enum DurationFormatOption
    {
        DefaultDuration,
        InitialDuration,
        ShowMilliseconds,
        HideSeconds,
        FoldHours
    };
    typedef QFlags<KFormat::DurationFormatOption> DurationFormatOptions;
    explicit                KFormat (const QLocale& locale = QLocale());
                            KFormat (const KFormat& other);
    ~KFormat ();
    QString                 formatByteSize (double size, int precision = 1, KFormat::BinaryUnitDialect dialect = KFormat::DefaultBinaryDialect, KFormat::BinarySizeUnits units = KFormat::DefaultBinaryUnits) const;
    QString                 formatDuration (quint64 msecs, KFormat::DurationFormatOptions options = KFormat::DefaultDuration) const;
    QString                 formatDecimalDuration (quint64 msecs, int decimalPlaces = 2) const;
    QString                 formatSpelloutDuration (quint64 msecs) const;
    QString                 formatRelativeDate (const QDate& date, QLocale::FormatType format) const;
    QString                 formatRelativeDateTime (const QDateTime& dateTime, QLocale::FormatType format) const;
};
