// Copyright 2014 Simon Edwards <simon@simonzone.com>

//                 Generated by twine2

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Library General Public License as
// published by the Free Software Foundation; either version 2, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details

// You should have received a copy of the GNU Library General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

class KJob : QObject
{
%TypeHeaderCode
#include <kjob.h>
%End

public:
    enum Unit
    {
        Bytes,
        Files,
        Directories
    };
    enum Capability
    {
        NoCapabilities,
        Killable,
        Suspendable
    };
    typedef QFlags<KJob::Capability> Capabilities;
    explicit                KJob (QObject* parent = 0);
    virtual ~KJob ();
    void                    setUiDelegate (KJobUiDelegate* delegate);
    KJobUiDelegate*         uiDelegate () const;
    KJob::Capabilities      capabilities () const;
    bool                    isSuspended () const;
    virtual void            start ()=0;
    enum KillVerbosity
    {
        Quietly,
        EmitResult
    };
    bool                    kill (KJob::KillVerbosity verbosity = KJob::KillVerbosity::Quietly);
    bool                    suspend ();
    bool                    resume ();
protected:
    virtual bool            doKill ();
    virtual bool            doSuspend ();
    virtual bool            doResume ();
    void                    setCapabilities (KJob::Capabilities capabilities);
public:
    bool                    exec ();
    enum
    {
        NoError,
        KilledJobError,
        UserDefinedError
    };
    int                     error () const;
    QString                 errorText () const;
    virtual QString         errorString () const;
    qulonglong              processedAmount (KJob::Unit unit) const;
    qulonglong              totalAmount (KJob::Unit unit) const;
    unsigned long           percent () const;
    void                    setAutoDelete (bool autodelete);
    bool                    isAutoDelete () const;
signals:
//ig    void                    finished (KJob* job, QPrivateSignal);
//ig    void                    suspended (KJob* job, QPrivateSignal);
//ig    void                    resumed (KJob* job, QPrivateSignal);
//ig    void                    result (KJob* job, QPrivateSignal);

//force
    void                    finished (KJob* job);
    void                    suspended (KJob* job);
    void                    resumed (KJob* job);
    void                    result (KJob* job);
//end

// FIXME
//ig    void                    description (KJob* job, const QString& title, const QPair<QString,QString>& field1 = qMakePair(QString(),QString()), const QPair<QString,QString>& field2 = qMakePair(QString(),QString()));
    void                    infoMessage (KJob* job, const QString& plain, const QString& rich = QString());
    void                    warning (KJob* job, const QString& plain, const QString& rich = QString());
protected:
    void                    setError (int errorCode);
    void                    setErrorText (const QString& errorText);
    void                    setProcessedAmount (KJob::Unit unit, qulonglong amount);
    void                    setTotalAmount (KJob::Unit unit, qulonglong amount);
    void                    setPercent (unsigned long percentage);
    void                    emitResult ();
    void                    emitPercent (qulonglong processedAmount, qulonglong totalAmount);
    void                    emitSpeed (unsigned long speed);
//ig                            KJob (KJobPrivate& dd, QObject* parent);
};
