// Copyright 2014 Simon Edwards <simon@simonzone.com>

//                 Generated by twine2

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Library General Public License as
// published by the Free Software Foundation; either version 2, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details

// You should have received a copy of the GNU Library General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

class KMacroExpanderBase /NoDefaultCtors/
{
%TypeHeaderCode
#include <kmacroexpander.h>
%End

public:
    explicit                KMacroExpanderBase (QChar c = QLatin1Char('%'));
    virtual ~KMacroExpanderBase ();
    void                    expandMacros (QString& str);
    bool                    expandMacrosShellQuote (QString& str, int& pos);
//ig    bool                    expandMacrosShellQuote (QString& str);
    void                    setEscapeChar (QChar c);
    QChar                   escapeChar () const;
protected:
    virtual int             expandPlainMacro (const QString& str, int pos, QStringList& ret);
    virtual int             expandEscapedMacro (const QString& str, int pos, QStringList& ret);
%ConvertToSubClassCode
    // CTSCC for subclasses of 'KMacroExpanderBase'
    sipType = NULL;

    if (dynamic_cast<KCharMacroExpander*>(sipCpp))
        sipType = sipType_KCharMacroExpander;
    else if (dynamic_cast<KWordMacroExpander*>(sipCpp))
        sipType = sipType_KWordMacroExpander;
%End
};
class KWordMacroExpander : KMacroExpanderBase
{
%TypeHeaderCode
#include <kmacroexpander.h>
%End

public:
    explicit                KWordMacroExpander (QChar c = QLatin1Char('%'));
protected:
    virtual int             expandPlainMacro (const QString& str, int pos, QStringList& ret);
    virtual int             expandEscapedMacro (const QString& str, int pos, QStringList& ret);
    virtual bool            expandMacro (const QString& str, QStringList& ret)=0;
};
class KCharMacroExpander : KMacroExpanderBase
{
%TypeHeaderCode
#include <kmacroexpander.h>
%End

public:
    explicit                KCharMacroExpander (QChar c = QLatin1Char('%'));
protected:
    virtual int             expandPlainMacro (const QString& str, int pos, QStringList& ret);
    virtual int             expandEscapedMacro (const QString& str, int pos, QStringList& ret);
    virtual bool            expandMacro (QChar chr, QStringList& ret)=0;
};
namespace KMacroExpander
{
QString                 expandMacros (const QString& str, const QHash<QChar,QString>& map, QChar c = QLatin1Char('%'));
//ig QString                 expandMacrosShellQuote (const QString& str, const QHash<QChar,QString>& map, QChar c = QLatin1Char('%'));
QString                 expandMacros (const QString& str, const QHash<QString,QString>& map, QChar c = QLatin1Char('%'));
//ig QString                 expandMacrosShellQuote (const QString& str, const QHash<QString,QString>& map, QChar c = QLatin1Char('%'));
QString                 expandMacros (const QString& str, const QHash<QChar,QStringList>& map, QChar c = QLatin1Char('%'));
QString                 expandMacros (const QString& str, const QHash<QString,QStringList>& map, QChar c = QLatin1Char('%'));
//ig QString                 expandMacrosShellQuote (const QString& str, const QHash<QChar,QStringList>& map, QChar c = QLatin1Char('%'));
QString                 expandMacrosShellQuote (const QString& str, const QHash<QString,QStringList>& map, QChar c = QLatin1Char('%'));
};
%ModuleHeaderCode
//ctscc
#include <kmacroexpander.h>
%End
