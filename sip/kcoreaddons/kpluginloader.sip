// Copyright 2014 Simon Edwards <simon@simonzone.com>

//                 Generated by twine2

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Library General Public License as
// published by the Free Software Foundation; either version 2, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details

// You should have received a copy of the GNU Library General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

class KPluginLoader : QObject
{
%TypeHeaderCode
#include <kpluginloader.h>
%End

public:
    explicit                KPluginLoader (const QString& plugin, QObject* parent = 0);
    explicit                KPluginLoader (const KPluginName& name, QObject* parent = 0);
    ~KPluginLoader ();
    KPluginFactory*         factory ();
    QString                 pluginName () const;
    quint32                 pluginVersion ();
    static QString          findPlugin (const QString& name);
    QString                 errorString () const;
    QString                 fileName () const;
    QObject*                instance ();
    bool                    isLoaded () const;
    bool                    load ();
    QLibrary::LoadHints     loadHints () const;
//ig    QJsonObject             metaData () const;
    void                    setLoadHints (QLibrary::LoadHints loadHints);
    bool                    unload ();
};
class KPluginName
{
%TypeHeaderCode
#include <kpluginloader.h>
%End

public:
    explicit                KPluginName (const QString& name);
    QString                 name () const;
    bool                    isValid () const;
    QString                 errorString () const;
    static KPluginName      fromErrorString (const QString& errorString);
private:
                            KPluginName (const QString& name, bool isError);
};
//ig                        KPluginName::KPluginName (const QString& name);
//ig                        KPluginName::KPluginName (const QString& name, bool isError);
//ig QString                 KPluginName::name () const;
//ig bool                    KPluginName::isValid () const;
//ig QString                 KPluginName::errorString () const;
//ig KPluginName             KPluginName::fromErrorString (const QString& errorString);
