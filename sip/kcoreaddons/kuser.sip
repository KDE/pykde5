// Copyright 2014 Simon Edwards <simon@simonzone.com>

//                 Generated by twine2

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Library General Public License as
// published by the Free Software Foundation; either version 2, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details

// You should have received a copy of the GNU Library General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

typedef uid_t K_UID;
typedef gid_t K_GID;

//force
struct KUserId
{
%TypeHeaderCode
#include <kuser.h>
%End
                            KUserId ();
    explicit                KUserId (K_UID uid);
                            KUserId (const KUserId& other);
    ~KUserId ();
public:
    bool                    isValid () const;
    K_UID                   nativeId () const;
    QString                 toString () const;
    bool                    operator== (const KUserId& other) const;
    bool                    operator!= (const KUserId& other) const;
%ConvertToSubClassCode
    // CTSCC for subclasses of 'KUserId'
    sipType = NULL;

    if (dynamic_cast<KUserId*>(sipCpp))
        sipType = sipType_KUserId;
%End
};

struct KGroupId
{
%TypeHeaderCode
#include <kuser.h>
%End
                            KGroupId ();
    explicit                KGroupId (K_UID uid);
                            KGroupId (const KGroupId& other);
    ~KGroupId ();
public:
    bool                    isValid () const;
    K_GID                   nativeId () const;
    QString                 toString () const;
    bool                    operator== (const KGroupId& other) const;
    bool                    operator!= (const KGroupId& other) const;
%ConvertToSubClassCode
    // CTSCC for subclasses of 'KGroupId'
    sipType = NULL;

    if (dynamic_cast<KGroupId*>(sipCpp))
        sipType = sipType_KGroupId;
%End
};
//end

class KUser
{
%TypeHeaderCode
#include <kuser.h>
%End

public:
    enum UIDMode
    {
        UseEffectiveUID,
        UseRealUserID
    };
    explicit                KUser (KUser::UIDMode mode = KUser::UIDMode::UseEffectiveUID);
    explicit                KUser (K_UID uid);
    explicit                KUser (const QString& name);
    explicit                KUser (const char* name);
//ig    explicit                KUser (const passwd* p);
                            KUser (const KUser& user);
    bool                    isValid () const;
    bool                    isSuperUser () const;
    QString                 loginName () const;
    QString                 homeDir () const;
    QString                 faceIconPath () const;
    QString                 shell () const;
    QList<KUserGroup>       groups (uint maxCount = 0xffffffff) const;
    QStringList             groupNames (uint maxCount = 0xffffffff) const;
    enum UserProperty
    {
        FullName,
        RoomNumber,
        WorkPhone,
        HomePhone
    };
    QVariant                property (KUser::UserProperty which) const;
    ~KUser ();
    static QList<KUser>     allUsers (uint maxCount = 0xffffffff);
    static QStringList      allUserNames (uint maxCount = 0xffffffff);
    explicit                KUser (KUserId uid);
 //ig   KUser&                  operator= (const KUser& user);
    bool                    operator== (const KUser& user) const;
    bool                    operator!= (const KUser& user) const;
    KUserId                 userId () const;
    KGroupId                groupId () const;
};

class KUserGroup
{
%TypeHeaderCode
#include <kuser.h>
%End

public:
    explicit                KUserGroup (const QString& name);
    explicit                KUserGroup (const char* name);
    explicit                KUserGroup (KUser::UIDMode mode = KUser::UseEffectiveUID);
    explicit                KUserGroup (K_GID gid);
//ig    explicit                KUserGroup (const group* g);
                            KUserGroup (const KUserGroup& group);
    bool                    isValid () const;
    QString                 name () const;
    QList<KUser>            users (uint maxCount = 0xffffffff) const;
    QStringList             userNames (uint maxCount = 0xffffffff) const;
    ~KUserGroup ();
    static QList<KUserGroup>  allGroups (uint maxCount = 0xffffffff);
    static QStringList      allGroupNames (uint maxCount = 0xffffffff);
    explicit                KUserGroup (KGroupId gid);
//ig    KUserGroup&             operator= (const KUserGroup& group);
    bool                    operator== (const KUserGroup& group) const;
    bool                    operator!= (const KUserGroup& group) const;
    KGroupId                groupId () const;
};


//bool KUser::            operator!= (const KUser& other) const;
//bool KUserGroup::       operator!= (const KUserGroup& other) const;
%ModuleHeaderCode
//ctscc
#include <kuser.h>
%End
