// Copyright 2014 Simon Edwards <simon@simonzone.com>

//                 Generated by twine2

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Library General Public License as
// published by the Free Software Foundation; either version 2, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details

// You should have received a copy of the GNU Library General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

namespace Solid
{
class Device
{
%TypeHeaderCode
#include <device.h>
%End

public:
    static QList<Solid::Device>  allDevices ();
    static QList<Solid::Device>  listFromType (const Solid::DeviceInterface::Type& type, const QString& parentUdi = QString());
    static QList<Solid::Device>  listFromQuery (const Solid::Predicate& predicate, const QString& parentUdi = QString());
    static QList<Solid::Device>  listFromQuery (const QString& predicate, const QString& parentUdi = QString());
    explicit                Device (const QString& udi = QString());
                            Device (const Solid::Device& device);
    ~Device ();
    bool                    isValid () const;
    QString                 udi () const;
    QString                 parentUdi () const;
    Solid::Device           parent () const;
    QString                 vendor () const;
    QString                 product () const;
    QString                 icon () const;
    QStringList             emblems () const;
    QString                 description () const;
    bool                    isDeviceInterface (const Solid::DeviceInterface::Type& type) const;
//ig    Solid::DeviceInterface*  asDeviceInterface (const Solid::DeviceInterface::Type& type);
    const Solid::DeviceInterface*  asDeviceInterface (const Solid::DeviceInterface::Type& type) const;
//ig    Solid::Device&          operator= (const Solid::Device& device);
};
};
