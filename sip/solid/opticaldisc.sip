// Copyright 2014 Simon Edwards <simon@simonzone.com>

//                 Generated by twine2

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Library General Public License as
// published by the Free Software Foundation; either version 2, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details

// You should have received a copy of the GNU Library General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

namespace Solid
{
class OpticalDisc : Solid::StorageVolume
{
%TypeHeaderCode
#include <opticaldisc.h>
%End

public:
    enum ContentType
    {
        NoContent,
        Audio,
        Data,
        VideoCd,
        SuperVideoCd,
        VideoDvd,
        VideoBluRay
    };
    typedef QFlags<Solid::OpticalDisc::ContentType> ContentTypes;
    enum DiscType
    {
        UnknownDiscType,
        CdRom,
        CdRecordable,
        CdRewritable,
        DvdRom,
        DvdRam,
        DvdRecordable,
        DvdRewritable,
        DvdPlusRecordable,
        DvdPlusRewritable,
        DvdPlusRecordableDuallayer,
        DvdPlusRewritableDuallayer,
        BluRayRom,
        BluRayRecordable,
        BluRayRewritable,
        HdDvdRom,
        HdDvdRecordable,
        HdDvdRewritable
    };
private:
    explicit                OpticalDisc (QObject* backendObject);
public:
    virtual ~OpticalDisc ();
    static Solid::DeviceInterface::Type  deviceInterfaceType ();
    Solid::OpticalDisc::ContentTypes  availableContent () const;
    Solid::OpticalDisc::DiscType  discType () const;
    bool                    isAppendable () const;
    bool                    isBlank () const;
    bool                    isRewritable () const;
    qulonglong              capacity () const;
};
};
