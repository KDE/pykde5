// Copyright 2014 Simon Edwards <simon@simonzone.com>

//                 Generated by twine2

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Library General Public License as
// published by the Free Software Foundation; either version 2, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details

// You should have received a copy of the GNU Library General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

namespace Solid
{
class Predicate
{
%TypeHeaderCode
#include <predicate.h>
%End

public:
    enum ComparisonOperator
    {
        Equals,
        Mask
    };
    enum Type
    {
        PropertyCheck,
        Conjunction,
        Disjunction,
        InterfaceCheck
    };
                            Predicate ();
                            Predicate (const Solid::Predicate& other);
                            Predicate (const Solid::DeviceInterface::Type& ifaceType, const QString& property, const QVariant& value, Solid::Predicate::ComparisonOperator compOperator = Solid::Predicate::ComparisonOperator::Equals);
                            Predicate (const QString& ifaceName, const QString& property, const QVariant& value, Solid::Predicate::ComparisonOperator compOperator = Solid::Predicate::ComparisonOperator::Equals);
    explicit                Predicate (const Solid::DeviceInterface::Type& ifaceType);
    explicit                Predicate (const QString& ifaceName);
    ~Predicate ();
//ig    Solid::Predicate&       operator= (const Solid::Predicate& other);
    Solid::Predicate        operator& (const Solid::Predicate& other);
    Solid::Predicate&       operator&= (const Solid::Predicate& other);
    Solid::Predicate        operator| (const Solid::Predicate& other);
    Solid::Predicate&       operator|= (const Solid::Predicate& other);
    bool                    isValid () const;
    bool                    matches (const Solid::Device& device) const;
    QSet<Solid::DeviceInterface::Type>  usedTypes () const;
    QString                 toString () const;
    static Solid::Predicate  fromString (const QString& predicate);
    Solid::Predicate::Type  type () const;
    Solid::DeviceInterface::Type  interfaceType () const;
    QString                 propertyName () const;
    QVariant                matchingValue () const;
    Solid::Predicate::ComparisonOperator  comparisonOperator () const;
    Solid::Predicate        firstOperand () const;
    Solid::Predicate        secondOperand () const;
};
};
