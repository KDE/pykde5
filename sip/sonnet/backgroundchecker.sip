// Copyright 2014 Simon Edwards <simon@simonzone.com>

//                 Generated by twine2

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Library General Public License as
// published by the Free Software Foundation; either version 2, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details

// You should have received a copy of the GNU Library General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

namespace Sonnet
{
class BackgroundChecker : QObject
{
%TypeHeaderCode
#include <backgroundchecker.h>
%End

public:
    explicit                BackgroundChecker (QObject* parent = 0);
    explicit                BackgroundChecker (const Sonnet::Speller& speller, QObject* parent = 0);
    ~BackgroundChecker ();
    void                    setText (const QString& text);
    QString                 text () const;
    QString                 currentContext () const;
    Sonnet::Speller         speller () const;
    void                    setSpeller (const Sonnet::Speller& speller);
    bool                    checkWord (const QString& word);
    QStringList             suggest (const QString& word) const;
    bool                    addWordToPersonal (const QString& word);
    virtual void            start ();
    virtual void            stop ();
    void                    replace (int start, const QString& oldText, const QString& newText);
    void                    changeLanguage (const QString& lang);
    virtual void            continueChecking ();
signals:
    void                    misspelling (const QString& word, int start);
    void                    done ();
protected:
    virtual QString         fetchMoreText ();
    virtual void            finishedCurrentFeed ();
    void                    slotEngineDone ();
};
};
